-- MySQL Script generated by MySQL Workbench
-- Wed Jan 31 01:09:14 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema hotel_booking_test
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema hotel_booking_test
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `hotel_booking_test` DEFAULT CHARACTER SET utf8 ;
USE `hotel_booking_test` ;

-- -----------------------------------------------------
-- Table `hotel_booking_test`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`role` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`role` (
  `id_role` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор роли',
  `role` VARCHAR(30) NOT NULL COMMENT 'Словесное опиание роли, в jave роль будет в виде enum-а',
  PRIMARY KEY (`id_role`),
  UNIQUE INDEX `role_UNIQUE` (`role` ASC),
  UNIQUE INDEX `id_role_UNIQUE` (`id_role` ASC))
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит роль пользователя на сайте, в зависимости от роли будут доступны различные дополнительные функции.';


-- -----------------------------------------------------
-- Table `hotel_booking_test`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`user` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`user` (
  `id_user` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор пользователя',
  `first_name` VARCHAR(100) NOT NULL COMMENT 'Имя пользователя, 100 символов было выделенно, так есть в ряде стран существуют составные имена, например Чарльз Филипп Артур Джордж (принц Уэльский) и это не самое длинное имя.',
  `middle_name` VARCHAR(50) NULL COMMENT 'Отчество пользователя. Может быть null так как не во всех странах люди имеют отчество',
  `last_name` VARCHAR(100) NOT NULL COMMENT 'Фамилия пользователя. 100 символов было выделено так как существуют составные фамилии.',
  `balance` DECIMAL(19,2) NOT NULL DEFAULT 0 COMMENT 'Баланс пользователя. Был выбран тип DECIMAL так как он самый точный, а при работе с деньгами должна быть большая точность',
  `email` VARCHAR(255) NOT NULL COMMENT 'Электронная почта пользователя.',
  `phone_number` VARCHAR(15) NOT NULL,
  `password` VARCHAR(60) NOT NULL COMMENT 'Пароль пользователя в виде хэша. 60 символов было вырабно из-за того, что будет использоваться библиотека org.springframework.security.crypto.bcrypt.BCrypt, которая возвращает  хэш состоящий из 60 символов',
  `role_id_fk` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Ссылка на роль пользователя.',
  `active` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Логическое поле хранящее информацию о статусе пользователя, например администратор забанил его, и его аккаунт замораживаеться, значение устанавливается в 0',
  PRIMARY KEY (`id_user`),
  UNIQUE INDEX `iduser_UNIQUE` (`id_user` ASC),
  INDEX `fk_user_role_idx` (`role_id_fk` ASC),
  UNIQUE INDEX `username_UNIQUE` (`email` ASC),
  CONSTRAINT `fk_user_role`
    FOREIGN KEY (`role_id_fk`)
    REFERENCES `hotel_booking_test`.`role` (`id_role`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит полную информацию о пользователе';


-- -----------------------------------------------------
-- Table `hotel_booking_test`.`apartment_class`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`apartment_class` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`apartment_class` (
  `id_apartment_class` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор класса номеров',
  `type` VARCHAR(30) NOT NULL COMMENT 'Словесное опиание класса номера, в jave класс будет в виде enum-а',
  `rooms_amount` TINYINT(3) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Количество комнат в номере',
  `max_capacity` TINYINT(3) NOT NULL COMMENT 'Максимальная вместимость (человек)',
  `cost_per_night` DECIMAL(19,2) NOT NULL COMMENT 'Стоимость номера за ночь',
  `cost_per_person` DECIMAL(19,2) NOT NULL COMMENT 'Стоимость одного спального места в номере',
  `description` TEXT NOT NULL,
  `image_path` VARCHAR(255) NOT NULL COMMENT 'Пусть к картинке, на которой изображен номер данного класса',
  PRIMARY KEY (`id_apartment_class`),
  UNIQUE INDEX `type_UNIQUE` (`type` ASC),
  UNIQUE INDEX `id_apartment_type_UNIQUE` (`id_apartment_class` ASC))
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит данные о классе номеров, каждый класс номеров имеет свои уникальные свойства';


-- -----------------------------------------------------
-- Table `hotel_booking_test`.`apartment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`apartment` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`apartment` (
  `id_apartment` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор номера',
  `number` VARCHAR(20) NOT NULL COMMENT 'Идентификатор номера в отеле, сделан символьным типом так как могут быть номера вроде 214а, 2107в',
  `floor` SMALLINT(4) NOT NULL COMMENT 'Этаж на котором расположен номер в отеле',
  `apartment_class_id_fk` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Ссылка на класс номера в отеле',
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_apartment`),
  INDEX `fk_apartment_apartment_type1_idx` (`apartment_class_id_fk` ASC),
  UNIQUE INDEX `id_apartment_UNIQUE` (`id_apartment` ASC),
  CONSTRAINT `fk_apartment_apartment_type1`
    FOREIGN KEY (`apartment_class_id_fk`)
    REFERENCES `hotel_booking_test`.`apartment_class` (`id_apartment_class`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит полную инормацию о номере отеля';


-- -----------------------------------------------------
-- Table `hotel_booking_test`.`status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`status` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`status` (
  `id_status` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный иднтификатор статуса заказа',
  `status` VARCHAR(45) NOT NULL COMMENT 'Словесное опиание статуса, в jave статус будет в виде enum-а',
  PRIMARY KEY (`id_status`),
  UNIQUE INDEX `id_status_UNIQUE` (`id_status` ASC),
  UNIQUE INDEX `status_UNIQUE` (`status` ASC))
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит данные о статусе заказа, статус позволяет отследить весь жизненный цикл заказа и коректно обработать его';


-- -----------------------------------------------------
-- Table `hotel_booking_test`.`reservation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hotel_booking_test`.`reservation` ;

CREATE TABLE IF NOT EXISTS `hotel_booking_test`.`reservation` (
  `id_reservation` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор брони',
  `check_in_date` DATE NOT NULL COMMENT 'Дата заселения в отель, указана только дата так как в отелях заселения идет после 12 дня указанной даты',
  `check_out_date` DATE NOT NULL COMMENT 'Дата выселения из отеля, указана дата так как в отелях выселение идет до 11 часов указанной даты',
  `order_time` DATETIME NOT NULL COMMENT 'Время и дата бронирования пользователем номера',
  `person_amount` TINYINT(3) NOT NULL COMMENT 'Количество человек для которых будут подготовлены спальные места',
  `cost_per_person` DECIMAL(19,2) NOT NULL COMMENT 'Стоимость одного спального места, была введена так как стоимость спального места может измениться после бронирования, а пользователь уже заплатил за него конкретную цену',
  `cost_per_night` DECIMAL(19,2) NOT NULL COMMENT 'Стоимость номера за одну ночь, была введена так как стоимость номера может измениться после бронирования, а пользователь уже заплатил за него конкретную цену',
  `total_cost` DECIMAL(19,2) NOT NULL COMMENT 'Полная стоимость номера, введена для сокращения времени на расчет цены, так как она используеться во многих местах ',
  `user_id_fk` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Ссылка на пользователя, который забронировал номер',
  `apartment_id_fk` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Ссылка на номер, который был выделен пользователю',
  `status_id_fk` BIGINT(20) UNSIGNED NOT NULL COMMENT 'Ссылка на статус данного номера, статус позволяет узнать состояние брони',
  PRIMARY KEY (`id_reservation`),
  UNIQUE INDEX `id_reservation_UNIQUE` (`id_reservation` ASC),
  INDEX `fk_reservation_user1_idx` (`user_id_fk` ASC),
  INDEX `fk_reservation_apartment1_idx` (`apartment_id_fk` ASC),
  INDEX `fk_reservation_status1_idx` (`status_id_fk` ASC),
  CONSTRAINT `fk_reservation_user`
    FOREIGN KEY (`user_id_fk`)
    REFERENCES `hotel_booking_test`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reservation_apartment`
    FOREIGN KEY (`apartment_id_fk`)
    REFERENCES `hotel_booking_test`.`apartment` (`id_apartment`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reservation_status`
    FOREIGN KEY (`status_id_fk`)
    REFERENCES `hotel_booking_test`.`status` (`id_status`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Таблица которая хранит полную информацию о брони клиента';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`role`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`role` (`id_role`, `role`) VALUES (2, 'User');
INSERT INTO `hotel_booking_test`.`role` (`id_role`, `role`) VALUES (1, 'Admin');

COMMIT;


-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`user` (`id_user`, `first_name`, `middle_name`, `last_name`, `balance`, `email`, `phone_number`, `password`, `role_id_fk`, `active`) VALUES (1, 'Vadim', 'Alekseevich', 'Martyniuk', 1000, 'konkord321@gmail.com', '+375257473147', '$2a$10$CoZeYuDWPHpdMFWn6H4I2eXI36e3NVyDrdujnm0zr6cUasG42df8q', 1, 1);
INSERT INTO `hotel_booking_test`.`user` (`id_user`, `first_name`, `middle_name`, `last_name`, `balance`, `email`, `phone_number`, `password`, `role_id_fk`, `active`) VALUES (2, 'Ivan', 'Ivanovich', 'Ivanov', 1000, 'user@gmail.com', '+375291234567', '$2a$10$dli9pv2bKHf9.OfGatlFrOFJaWRYR14C94VBX1jL33ckdbIiTEg9u', 2, 1);
INSERT INTO `hotel_booking_test`.`user` (`id_user`, `first_name`, `middle_name`, `last_name`, `balance`, `email`, `phone_number`, `password`, `role_id_fk`, `active`) VALUES (3, 'Petr', 'Petrovich', 'Petrov', 600, 'admin@gmail.com', '+375297654321', '$2a$10$P8ZA5JJ37PR60kWr7TL4uuICnTWckqgDn8vNKHIkefHkHPMJlQbKC', 1, 1);
INSERT INTO `hotel_booking_test`.`user` (`id_user`, `first_name`, `middle_name`, `last_name`, `balance`, `email`, `phone_number`, `password`, `role_id_fk`, `active`) VALUES (4, 'Aleksei', 'Alekseevich', 'Alekseev', 500, 'banneduser@gmail.com', '+375440904312', '$2a$10$dli9pv2bKHf9.OfGatlFrOFJaWRYR14C94VBX1jL33ckdbIiTEg9u', 2, 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`apartment_class`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (2, 'Double room', 1, 2, 135, 35, 'An elegant stylish room with a queen-size bed.', 'img/double-room.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (1, 'Single', 1, 1, 100, 45, 'A comfortable classic room with a single bed for one person.', 'img/single.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (3, 'Twin room', 1, 2, 135, 35, 'A lovely standard twin room (two single beds) overlooking the courtyard.', 'img/twin-room.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (4, 'King size Deluxe', 1, 2, 145, 40, 'A spacious and cozy deluxe room appointed in a classic style with a magnificent view of the City Hall.', 'img/king-size-deluxe.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (5, 'Junior Suite', 2, 2, 220, 40, 'An exclusive 2-room suite featuring a cozy bedroom and an elegant living area.', 'img/junior-suite.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (6, 'Business Suite', 2, 2, 500, 70, 'Enjoy charm and authenticity of the spacious 2-room suite that suits both for business meetings and private pastime.', 'img/business-suite.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (7, 'Apartment', 2, 2, 900, 65, 'A beautifully appointed 2-room apartment with a small kitchenette.', 'img/apartment.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (8, 'Connective', 1, 3, 230, 35, 'This is a unique option for couples with children or friends.', 'img/connective.jpg');
INSERT INTO `hotel_booking_test`.`apartment_class` (`id_apartment_class`, `type`, `rooms_amount`, `max_capacity`, `cost_per_night`, `cost_per_person`, `description`, `image_path`) VALUES (9, 'Presidential Suite', 3, 2, 1100, 110, 'The most luxurious and exquisite suite composes 3 elegant rooms: a living-room with a working area and a bed-room.', 'img/presidential-uite.jpg');

COMMIT;


-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`apartment`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (1, '101', 1, 2, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (2, '102', 1, 1, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (3, '103', 1, 2, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (4, '104', 1, 3, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (5, '105', 1, 4, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (6, '202', 2, 5, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (7, '203', 2, 5, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (8, '204', 2, 6, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (9, '206', 2, 6, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (10, '301', 3, 7, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (11, '302', 3, 4, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (12, '304', 3, 3, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (13, '305', 3, 7, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (14, '402', 4, 8, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (15, '403', 4, 8, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (16, '404', 4, 9, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (17, '500', 5, 9, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (18, '500(a)', 5, 2, 1);
INSERT INTO `hotel_booking_test`.`apartment` (`id_apartment`, `number`, `floor`, `apartment_class_id_fk`, `active`) VALUES (19, '505', 5, 3, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`status`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`status` (`id_status`, `status`) VALUES (1, 'Waiting_for_approve');
INSERT INTO `hotel_booking_test`.`status` (`id_status`, `status`) VALUES (2, 'Approved');
INSERT INTO `hotel_booking_test`.`status` (`id_status`, `status`) VALUES (3, 'Declined');
INSERT INTO `hotel_booking_test`.`status` (`id_status`, `status`) VALUES (4, 'Canceled');

COMMIT;


-- -----------------------------------------------------
-- Data for table `hotel_booking_test`.`reservation`
-- -----------------------------------------------------
START TRANSACTION;
USE `hotel_booking_test`;
INSERT INTO `hotel_booking_test`.`reservation` (`id_reservation`, `check_in_date`, `check_out_date`, `order_time`, `person_amount`, `cost_per_person`, `cost_per_night`, `total_cost`, `user_id_fk`, `apartment_id_fk`, `status_id_fk`) VALUES (1, '2018-01-31', '2018-02-03', '2018-01-30 13:25:00', 1, 35.0000, 135.0000, 510.0000, 3, 1, 2);
INSERT INTO `hotel_booking_test`.`reservation` (`id_reservation`, `check_in_date`, `check_out_date`, `order_time`, `person_amount`, `cost_per_person`, `cost_per_night`, `total_cost`, `user_id_fk`, `apartment_id_fk`, `status_id_fk`) VALUES (2, '2018-02-06', '2018-02-08', '2018-01-31 20:15:56', 2, 40.00, 145.00, 450.00, 1, 5, 1);

COMMIT;

